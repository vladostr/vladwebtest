pipeline {
    agent any
    tools{
			maven 'myMaven-3'
			jdk 'myJDK-1.8'
		 } 
	stages{
		stage('Build Dev') {
            when { branch 'dev*' }
            steps {
                echo '1. Build'
                sh 'echo "Build for $BRANCH_NAME"'
            }
        }
        stage('Artifactory Dev') {
            when { branch 'dev*' }
            steps {
                echo '2. Load to Artifactory'
                sh 'echo "Artifactory for $BRANCH_NAME"'
            }
        }
	   stage('Build Master') {
            when { branch 'master' }
            steps {
                echo '1. Build for $BRANCH_NAME'
                sh 'mvn clean package -f $WORKSPACE/vladwebtest/pom.xml'
            }
        }
        stage('Artifactory master') {
            when { branch 'master' }
            steps {
                echo '2. Load to Artifactory for $BRANCH_NAME'
				script {
					def server = Artifactory.server('my_artifactory')
					def rtMaven = Artifactory.newMavenBuild()
					rtMaven.resolver server: server, releaseRepo: 'libs-release', snapshotRepo: 'libs-snapshot'
					rtMaven.deployer server: server, releaseRepo: 'libs-release-local', snapshotRepo: 'libs-snapshot-local'
					rtMaven.tool = 'myMaven-3'
					rtMaven.deployer.artifactDeploymentPatterns.addInclude("*.war")
					
					def buildInfo = rtMaven.run pom: '$WORKSPACE/vladwebtest/pom.xml', goals: 'clean install -U -Dmaven.test.skip=true'
					server.publishBuildInfo buildInfo
				}
				
            }
        }
    }
}    