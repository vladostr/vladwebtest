pipeline {
    agent any
    tools{
			maven 'myMaven-3'
			jdk 'myJDK-1.8'
		 } 
	environment{
		SELENIUM_CLASSPATH=""
		SELENIUM_OUTPUT="var"
	}
	stages{
		stage('Build Dev') {
            when { branch 'dev*' }
            steps {
                echo '1. Build'
                sh 'echo "Build for $BRANCH_NAME"'
            }
        }
        stage('Artifactory Dev') {
            when { branch 'dev*' }
            steps {
                echo '2. Load to Artifactory'
                sh 'echo "Artifactory for $BRANCH_NAME"'
            }
        }
         stage('SonarQube analysis') {
    		when { not { anyOf { branch 'dev1'; branch 'dev2' } } }
    		steps{
    			script{
    				try{
    					sh 'echo "Scanning for $BRANCH_NAME"'
    					notifyBuild('STARTED','SonarQube analysis')
			    		def scannerHome = tool 'my-sonar-runner'
			    		
			    		withSonarQubeEnv('my_sonarqube_server') {
			      			sh "${scannerHome}/bin/sonar-runner -D sonar.projectKey=vladwebtest:vladwebtest -D sonar.sources='$WORKSPACE/vladwebtest/'"
			      			def message=env.SONARQUBE_SERVER_URL+"/dashboard?id=vladwebtest:vladwebtest"
			      			notifyBuild('SUCCESS','SonarQube analysis', message)
			    		}
			    	}
		    		catch(e){
		    			currentBuild.result = "FAILED"
					   	notifyBuild('FAILURE','SonarQube analysis')
					    throw e
		    		}
		    	}
    		}
		}
        
	    stage('Build Master') {
            when { not { anyOf { branch 'dev1'; branch 'dev2' } } }
            steps {
            	script {
	            		notifyBuild('STARTED')
		                sh "echo 'Build # for $BUILD_NUMBER for branch $BRANCH_NAME started'"
		                sh 'mvn clean package -f $WORKSPACE/vladwebtest/pom.xml'
		        }
            }
            post {
		        always {
		            sh "echo 'Build $BUILD_NUMBER for branch $BRANCH_NAME' completed!"
		        }
		        success {
		            notifyBuild('SUCCESS')
		        }
		        unstable {
		            notifyBuild('UNSTABLE')
		        }
		        failure {
		            notifyBuild('FAILURE')
		        }
		        changed {
		            notifyBuild('CHANGED')
		        }
    		}    
        }
        stage('Artifactory master') {
            when { not { anyOf { branch 'dev1'; branch 'dev2' } } }
            steps {
            	script {
            		try {
	    				notifyBuild('STARTED','ARTIFACTORY')
						def server = Artifactory.server('my_artifactory')
						def rtMaven = Artifactory.newMavenBuild()
								           
			           	rtMaven.resolver server: server, releaseRepo: 'libs-release', snapshotRepo: 'libs-snapshot'
						rtMaven.deployer server: server, releaseRepo: 'libs-release-local', snapshotRepo: 'libs-snapshot-local'
						rtMaven.tool = 'myMaven-3'
						rtMaven.deployer.artifactDeploymentPatterns.addInclude("*.war")
						
						def buildInfo = rtMaven.run pom: '$WORKSPACE/vladwebtest/pom.xml', goals: 'clean install -U -Dmaven.test.skip=true'
																			
						server.publishBuildInfo buildInfo
						
						def message=server.url+"/webapp/builds/"+buildInfo.name + "/"+buildInfo.number
						
						notifyBuild('SUCCESS','ARTIFACTORY', message) 	
					}
	   			 	catch (e) {
					    currentBuild.result = "FAILED"
					   	notifyBuild('FAILURE','ARTIFACTORY')
					    throw e
					}
			  	}
			}
        }
        stage('Deploy to web on master') {
            when { not { anyOf { branch 'dev1'; branch 'dev2' } } }
            steps {
            	script {
            		try {
	    				notifyBuild('STARTED','DEPLOY')
	    				//download artifact
	    				message=env.TOMCAT_URL+"/vladwebtest"
						sh "curl -o vladwebtest-0.0.1-SNAPSHOT.war http://rhel73test:5081/artifactory/libs-snapshot-local/vladwebtest-0.0.1-SNAPSHOT.war"
						sh env.TOMCAT_HOME+"/bin/catalina.sh stop"
						sh "cp vladwebtest-0.0.1-SNAPSHOT.war "+env.TOMCAT_HOME+"/webapps"
						sh env.TOMCAT_HOME+"/bin/catalina.sh start"
						notifyBuild('SUCCESS','DEPLOY', message) 	
					}
	   			 	catch (e) {
					    currentBuild.result = "FAILED"
					   	notifyBuild('FAILURE','DEPLOY')
					    throw e
					}
			  	}
			}
        }
       
        stage('Test deployed to web on master') {
            when { not { anyOf { branch 'dev1'; branch 'dev2' } } }
            steps {
            	script {
            		try {
	    				notifyBuild('STARTED','TEST')
	    				SELENIUM_CLASSPATH="'/opt/selenium/selenium_java-3.141.59/client-combined-3.141.59-sources.jar:"+
	    				     "/opt/selenium/selenium_java-3.141.59/client-combined-3.141.59.jar:/opt/selenium/selenium_java-3.141.59/libs/okio-1.14.0.jar:"+
	    				     "/opt/selenium/selenium_java-3.141.59/libs/okhttp-3.11.0.jar:/opt/selenium/selenium_java-3.141.59/libs/guava-25.0-jre.jar:"+
	    				     "/opt/selenium/selenium_java-3.141.59/libs/commons-exec-1.3.jar:/opt/selenium/selenium_java-3.141.59/libs/byte-buddy-1.8.15.jar:"+
	    				     "/home/inst1/git/TestJavaPrg/TestJavaPrg/target/test-classes:/opt/jcommander/jcommander.jar:'/opt/selenium/selenium_java-3.141.59/client-combined-3.141.59-sources.jar:"+
	    				     "/opt/selenium/selenium_java-3.141.59/client-combined-3.141.59.jar:/opt/selenium/selenium_java-3.141.59/libs/okio-1.14.0.jar:"+
	    				     "/opt/selenium/selenium_java-3.141.59/libs/okhttp-3.11.0.jar:/opt/selenium/selenium_java-3.141.59/libs/guava-25.0-jre.jar:"+
	    				     "/opt/selenium/selenium_java-3.141.59/libs/commons-exec-1.3.jar:/opt/selenium/selenium_java-3.141.59/libs/byte-buddy-1.8.15.jar:"+
	    				     "/home/inst1/git/TestJavaPrg/TestJavaPrg/target/test-classes:/opt/jcommander/jcommander.jar:"+
	    				     "/home/inst1/.p2/pool/plugins/org.testng_6.14.2.r201802161450.jar" 
	    				     
	    				sh "java -cp $SELENIUM_CLASSPATH org.testng.TestNG -d '$SELENIUM_OUTPUT' '/home/inst1/git/TestJavaPrg/TestJavaPrg/testng.xml'"
						
						notifyBuild('SUCCESS','TEST') 	
					}
	   			 	catch (e) {
					    currentBuild.result = "FAILED"
					   	notifyBuild('FAILURE','TEST')
					    throw e
					}
			  	}
			}
        }
    }
}   

def notifyBuild(String buildStatus = 'STARTED', String step= 'BUILD', String param1='') {
  // Default values
  def colorName = 'RED'
  def colorCode = '#FF0000'
  def subject = step+" step ${buildStatus}: Job '${env.JOB_NAME} [${env.BUILD_NUMBER}]'"
  def summary = "${subject} (${env.BUILD_URL})"
  def details 
  
  branch="$BRANCH_NAME"
  
  // Override default values based on build status
  if (buildStatus == 'STARTED') {
    color = 'YELLOW'
    colorCode = '#FFFF00'
    if (step=='BUILD') {
    	details= """<p>STARTED: Job '${env.JOB_NAME} [${env.BUILD_NUMBER}]':</p>
    		<p>Check console output at &QUOT;<a href='${env.BUILD_URL}'>${env.JOB_NAME} [${env.BUILD_NUMBER}]</a>&QUOT;</p>"""
    } else if (step=='ARTIFACTORY'){
    	details= """<p>Artifactory upload STARTED: Job '${env.JOB_NAME} [${env.BUILD_NUMBER}]':</p>
    		<p>Check console output at &QUOT;<a href='${env.BUILD_URL}'>${env.JOB_NAME} [${env.BUILD_NUMBER}]</a>&QUOT;</p>"""
    } else if (step=='SonarQube analysis'){
    	details= """<p>SonarQube analysis STARTED: Job '${env.JOB_NAME} [${env.BUILD_NUMBER}]':</p>
    		<p>Check console output at &QUOT;<a href='${env.BUILD_URL}'>${env.JOB_NAME} [${env.BUILD_NUMBER}]</a>&QUOT;</p>"""
    } else if (step=='DEPLOY'){
    	details= """<p>DEPLOY step STARTED: Job '${env.JOB_NAME} [${env.BUILD_NUMBER}]':</p>
    		<p>Check console output at &QUOT;<a href='${env.BUILD_URL}'>${env.JOB_NAME} [${env.BUILD_NUMBER}]</a>&QUOT;</p>"""
    }else if (step=='TEST'){
    	details= """<p>Selenium test step STARTED: Job '${env.JOB_NAME} [${env.BUILD_NUMBER}]':</p>
    		<p>Check console output at &QUOT;<a href='${env.BUILD_URL}'>${env.JOB_NAME} [${env.BUILD_NUMBER}]</a>&QUOT;</p>"""
    }
    
  } else if (buildStatus == 'SUCCESS') {
    color = 'GREEN'
    colorCode = '#00FF00'
    if (step=='BUILD'){
    	details= """<p>SUCCESS: Job '${env.JOB_NAME} [${env.BUILD_NUMBER}]':</p>
    		<p>Check console output at &QUOT;<a href='${env.BUILD_URL}'>${env.JOB_NAME} [${env.BUILD_NUMBER}]</a>&QUOT;</p>"""
    } else if (step=='ARTIFACTORY'){
    	details= """<p>Build '${env.JOB_NAME} [${env.BUILD_NUMBER}]' was successfully deployed to Artifactory.</p>
    		<p>Browse it in Artifactory, using <a href='$param1'>this link</a>.</p>"""
    } else if (step=='SonarQube analysis'){
    	details= """<p>ANALYSIS SUCCESSFUL: Job '${env.JOB_NAME} [${env.BUILD_NUMBER}]':</p>
    		<p>You can browse report, using, using <a href='$param1'>this link</a>.</p>"""
    } else if (step=='DEPLOY'){
    	details= """<p>DEPLOY SUCCESSFUL: Job '${env.JOB_NAME} [${env.BUILD_NUMBER}]':</p>
    		<p>You can browse report, using, using <a href='$param1'>this link</a>.</p>"""
    } 
    else if (step=='TEST'){
    	subject="Selenium: Job '${env.JOB_NAME}' Status: currentBuild.result Tests: passed"
    } 
  } else if (buildStatus == 'UNSTABLE') {
    color = 'BLUE'
    colorCode = '#FFFF00'
    details= """<p>Job '${env.JOB_NAME} [${env.BUILD_NUMBER}]' is <b>UNSTABLE</b>:</p>
    	<p>Check console output at &QUOT;<a href='${env.BUILD_URL}'>${env.JOB_NAME} [${env.BUILD_NUMBER}]</a>&QUOT;</p>"""
  } else if (buildStatus == 'CHANGED') {
  	color = 'BLUE'
    colorCode = '#FFFF00'
    details= """<p>Job '${env.JOB_NAME} [${env.BUILD_NUMBER}]' was <b>CHANGED</b>:</p>
    	<p>Check console output at &QUOT;<a href='${env.BUILD_URL}'>${env.JOB_NAME} [${env.BUILD_NUMBER}]</a>&QUOT;</p>"""
  
  } else {
    color = 'RED'
    colorCode = '#FF0000'
    if (step=='BUILD') {
    	details= """<p>FAILED: Job '${env.JOB_NAME} [${env.BUILD_NUMBER}]':</p>
    		<p>Check console output at &QUOT;<a href='${env.BUILD_URL}'>${env.JOB_NAME} [${env.BUILD_NUMBER}]</a>&QUOT;</p>"""
    } else if (step=='SonarQube analysis'){
    	details= """<p>SonarQube analysis step FAILED: Job '${env.JOB_NAME} [${env.BUILD_NUMBER}]':</p>
    		<p>Check console output at &QUOT;<a href='${env.BUILD_URL}'>${env.JOB_NAME} [${env.BUILD_NUMBER}]</a>&QUOT;</p>"""
    } else if (step=='ARTIFACTORY'){
    	details= """<p>Artifactory upload FAILED: Job '${env.JOB_NAME} [${env.BUILD_NUMBER}]':</p>
    		<p>Check console output at &QUOT;<a href='${env.BUILD_URL}'>${env.JOB_NAME} [${env.BUILD_NUMBER}]</a>&QUOT;</p>"""
    }
    else if (step=='DEPLOY'){
    	details= """<p>DEPLOY FAILED: Job '${env.JOB_NAME} [${env.BUILD_NUMBER}]':</p>
    		<p>Check console output at &QUOT;<a href='${env.BUILD_URL}'>${env.JOB_NAME} [${env.BUILD_NUMBER}]</a>&QUOT;</p>"""
    } else if (step=='TEST'){
    	subject="Selenium: Job '${env.JOB_NAME}' Status: currentBuild.result Tests: failed"
    }
  }

  def returnedList = GetRecepients(branch)
  def recepient_list = (returnedList != "") ? returnedList : [[$class: 'RequesterRecipientProvider']]
  
  if ((step=='TEST') && (buildStatus != 'STARTED')) {  
	    emailext ( 
	    	mimeType: 'text/html',
	    	subject:subject,
	        body: '${FILE,path="var/emailable-report.html"}', 
	        recipientProviders: recepient_list
	    )
  } else {
    	emailext (
	      subject: subject,
	      body: details+"\n "+GetRecepients(branch),
	      recipientProviders: [[$class: 'RequesterRecipientProvider']]
	    )
  }
}

def GetRecepients(branch){
	def receipient_list=""
	def last_pos=-1
	def trailing_str=branch.toLowerCase()
	
	trailing_str="my.branch.for.GhostRiders"
	
	if (trailing_str.length()>=10) {
		def last_10=trailing_str[-10..-1]
		if (last_10.matches("\\d\\d\\.\\d\\.\\d{1,2}-\\d\\d")) {
			receipient_list=env.RTP_FULL_RECIPIENT_LIST
			return receipient_list
		}
	}
	
	if (trailing_str.length()>=9) {
		def last_9=trailing_str[-9..-1]
		if (last_9.matches("\\d\\d\\.\\d\\.\\d{1,2}-\\d\\d")) {
			receipient_list=env.RTP_FULL_RECIPIENT_LIST
			return receipient_list
		}
	}
	
	if (trailing_str.length()>=3){
		def last_3=trailing_str[-3..-1]
		if (last_3=="int"){
			receipient_list=env.RTP_FULL_RECIPIENT_LIST
			return receipient_list
		}
	}
	
	if (env.RTP_FULL_RECIPIENT_LIST.toLowerCase().contains(trailing_str)) {
		emails=env.RTP_FULL_RECIPIENT_LIST.toLowerCase().split(",")
		for (e in emails) {
    		if (e.contains(trailing_str)){
    			recepient_list=e
    			break
    		}
    		return receipient_list
		}
	}
	
	return receipient_list
}