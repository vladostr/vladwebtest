pipeline {
    agent any
    tools{
			maven 'myMaven-3'
			jdk 'myJDK-1.8'
		 } 
	stages{
		stage('Build Dev') {
            when { branch 'dev*' }
            steps {
                echo '1. Build'
                sh 'echo "Build for $BRANCH_NAME"'
            }
        }
        stage('Artifactory Dev') {
            when { branch 'dev*' }
            steps {
                echo '2. Load to Artifactory'
                sh 'echo "Artifactory for $BRANCH_NAME"'
            }
        }
        
        stage('SonarQube analysis') {
    		when { not { anyOf { branch 'dev1'; branch 'dev2' } } }
    		steps{
    			script{
    				try{
    					notifyBuild('STARTED','SonarQube analysis')
			    		def scannerHome = tool 'my-sonar-runner'
			    		withSonarQubeEnv('my_sonarqube_server') {
			      			sh "${scannerHome}/bin/sonar-runner -D sonar.projectKey=vladwebtest -D sonar.sources='$WORKSPACE/vladwebtest/"
		    		}
		    	}
    		}
		}
        
	    stage('Build Master') {
            when { not { anyOf { branch 'dev1'; branch 'dev2' } } }
            steps {
            	script {
	            		notifyBuild('STARTED')
		                sh "echo 'Build # for $BUILD_NUMBER for branch $BRANCH_NAME started'"
		                sh 'mvn clean package -f $WORKSPACE/vladwebtest/pom.xml'
		        }
            }
            post {
		        always {
		            sh "echo 'Build $BUILD_NUMBER for branch $BRANCH_NAME' completed!"
		        }
		        success {
		            notifyBuild('SUCCESS')
		        }
		        unstable {
		            notifyBuild('UNSTABLE')
		        }
		        failure {
		            notifyBuild('FAILURE')
		        }
		        changed {
		            notifyBuild('CHANGED')
		        }
    		}    
        }
        stage('Artifactory master') {
            when { not { anyOf { branch 'dev1'; branch 'dev2' } } }
            steps {
            	script {
            		try {
	    				notifyBuild('STARTED','ARTIFACTORY')
						def server = Artifactory.server('my_artifactory')
						def rtMaven = Artifactory.newMavenBuild()
								           
			           	rtMaven.resolver server: server, releaseRepo: 'libs-release', snapshotRepo: 'libs-snapshot'
						rtMaven.deployer server: server, releaseRepo: 'libs-release-local', snapshotRepo: 'libs-snapshot-local'
						rtMaven.tool = 'myMaven-3'
						rtMaven.deployer.artifactDeploymentPatterns.addInclude("*.war")
						
						def buildInfo = rtMaven.run pom: '$WORKSPACE/vladwebtest/pom.xml', goals: 'clean install -U -Dmaven.test.skip=true'
																			
						server.publishBuildInfo buildInfo
						
						def message=server.url+"/webapp/builds/"+buildInfo.name + "/"+buildInfo.number
						
						notifyBuild('SUCCESS','ARTIFACTORY', message) 	
					}
	   			 	catch (e) {
					    currentBuild.result = "FAILED"
					   	notifyBuild('FAILURE','ARTIFACTORY')
					    throw e
					}
			  	}
			}
        }
    }
}   

def notifyBuild(String buildStatus = 'STARTED', String step= 'BUILD', String param1='') {
  // Default values
  def colorName = 'RED'
  def colorCode = '#FF0000'
  def subject = step+" step ${buildStatus}: Job '${env.JOB_NAME} [${env.BUILD_NUMBER}]'"
  def summary = "${subject} (${env.BUILD_URL})"
  def details 

  // Override default values based on build status
  if (buildStatus == 'STARTED') {
    color = 'YELLOW'
    colorCode = '#FFFF00'
    if (step=='BUILD') {
    	details= """<p>STARTED: Job '${env.JOB_NAME} [${env.BUILD_NUMBER}]':</p>
    		<p>Check console output at &QUOT;<a href='${env.BUILD_URL}'>${env.JOB_NAME} [${env.BUILD_NUMBER}]</a>&QUOT;</p>"""
    } else if (step=='ARTIFACTORY'){
    	details= """<p>Artifactory upload STARTED: Job '${env.JOB_NAME} [${env.BUILD_NUMBER}]':</p>
    		<p>Check console output at &QUOT;<a href='${env.BUILD_URL}'>${env.JOB_NAME} [${env.BUILD_NUMBER}]</a>&QUOT;</p>"""
    } else if (step=='SonarQube analysis'){
    	details= """<p>SonarQube analysis STARTED: Job '${env.JOB_NAME} [${env.BUILD_NUMBER}]':</p>
    		<p>Check console output at &QUOT;<a href='${env.BUILD_URL}'>${env.JOB_NAME} [${env.BUILD_NUMBER}]</a>&QUOT;</p>"""
    }
    
  } else if (buildStatus == 'SUCCESS') {
    color = 'GREEN'
    colorCode = '#00FF00'
    if (step=='BUILD'){
    	details= """<p>SUCCESS: Job '${env.JOB_NAME} [${env.BUILD_NUMBER}]':</p>
    		<p>Check console output at &QUOT;<a href='${env.BUILD_URL}'>${env.JOB_NAME} [${env.BUILD_NUMBER}]</a>&QUOT;</p>"""
    } else if (step=='ARTIFACTORY'){
    	details= """<p>Build '${env.JOB_NAME} [${env.BUILD_NUMBER}]' was successfully deployed to Artifactory.</p>
    		<p>Browse it in Artifactory, using <a href='$param1'>this link</a>.</p>"""
    } else if (step=='SonarQube analysis'){
    	details= """<p>SUCCESS: Job '${env.JOB_NAME} [${env.BUILD_NUMBER}]':</p>
    		<p>Check console output at &QUOT;<a href='${env.BUILD_URL}'>${env.JOB_NAME} [${env.BUILD_NUMBER}]</a>&QUOT;</p>"""
    }
  } else if (buildStatus == 'UNSTABLE') {
    color = 'BLUE'
    colorCode = '#FFFF00'
    details= """<p>Job '${env.JOB_NAME} [${env.BUILD_NUMBER}]' is <b>UNSTABLE</b>:</p>
    	<p>Check console output at &QUOT;<a href='${env.BUILD_URL}'>${env.JOB_NAME} [${env.BUILD_NUMBER}]</a>&QUOT;</p>"""
  } else if (buildStatus == 'CHANGED') {
  	color = 'BLUE'
    colorCode = '#FFFF00'
    details= """<p>Job '${env.JOB_NAME} [${env.BUILD_NUMBER}]' was <b>CHANGED</b>:</p>
    	<p>Check console output at &QUOT;<a href='${env.BUILD_URL}'>${env.JOB_NAME} [${env.BUILD_NUMBER}]</a>&QUOT;</p>"""
  
  } else {
    color = 'RED'
    colorCode = '#FF0000'
    if (step=='BUILD') {
    	details= """<p>FAILED: Job '${env.JOB_NAME} [${env.BUILD_NUMBER}]':</p>
    		<p>Check console output at &QUOT;<a href='${env.BUILD_URL}'>${env.JOB_NAME} [${env.BUILD_NUMBER}]</a>&QUOT;</p>"""
    } else if (step=='ARTIFACTORY'){
    	details= """<p>Artifactory upload FAILED: Job '${env.JOB_NAME} [${env.BUILD_NUMBER}]':</p>
    		<p>Check console output at &QUOT;<a href='${env.BUILD_URL}'>${env.JOB_NAME} [${env.BUILD_NUMBER}]</a>&QUOT;</p>"""
    } else if (step=='SonarQube analysis'){
    	details= """<p>SonarQube analysis stage FAILED: Job '${env.JOB_NAME} [${env.BUILD_NUMBER}]':</p>
    		<p>Check console output at &QUOT;<a href='${env.BUILD_URL}'>${env.JOB_NAME} [${env.BUILD_NUMBER}]</a>&QUOT;</p>"""
    }
  }

  emailext (
      subject: subject,
      body: details,
      recipientProviders: [[$class: 'RequesterRecipientProvider']]
    )
}